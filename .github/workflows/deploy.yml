name: GitOps Deploy

on:
    push:
        branches:
            - main

env:
    PROJECT_ID: ${{ secrets.GKE_PROJECT }}
    GKE_CLUSTER: dwk-cluster
    GKE_REGION: europe-west4
    GKE_ZONE: europe-west4-a
    REGISTRY: europe-west4-docker.pkg.dev
    REPOSITORY: my-repository
    BRANCH: ${{ github.ref_name }}
    ARCHITECTURE: linux/amd64
    SKIP_DEPLOY: ${{ contains(join(github.event.commits.*.message, ' '), '#skip') }}

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        outputs:
            ping_pong_image: ${{ steps.set_outputs.outputs.ping_pong_image }}
            log_output_image: ${{ steps.set_outputs.outputs.log_output_image }}
            greeter_image: ${{ steps.set_outputs.outputs.greeter_image }}
            sanitized_branch: ${{ steps.branch_sanitizer.outputs.sanitized_name }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v5.0.0

            - name: Sanitize Branch Name
              id: branch_sanitizer
              run: |
                  # Convert branch name to lowercase
                  SANITIZED_BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
                  # Replace any characters that are not a-z, 0-9, or - with a hyphen
                  SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed -E 's/[^a-z0-9-]+/-/g')
                  # Remove leading/trailing hyphens and shorten to a maximum of 63 characters
                  SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed -E 's/^-+|-+$//g' | cut -c1-63)
                  # The namespace must start with an alphabet character or a digit
                  if [[ ! "$SANITIZED_BRANCH" =~ ^[a-z0-9] ]]; then
                      SANITIZED_BRANCH="ns-$SANITIZED_BRANCH"
                  fi
                  # Set the output variable for the sanitized branch name
                  echo "sanitized_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT

            - name: Set image tags
              id: set_outputs
              run: |
                  echo "ping_pong_image=${{env.REGISTRY}}/${{ secrets.GKE_PROJECT }}/${{ env.REPOSITORY }}/ping-pong:${{ github.ref_name}}-${{ github.sha }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
                  echo "log_output_image=${{env.REGISTRY}}/${{ secrets.GKE_PROJECT }}/${{ env.REPOSITORY }}/log-output:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
                  echo "greeter_image=${{env.REGISTRY}}/${{ secrets.GKE_PROJECT }}/${{ env.REPOSITORY }}/greeter:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

            - uses: google-github-actions/auth@v3
              with:
                  credentials_json: "${{ secrets.GKE_SA_KEY }}"

            - name: "Set up Cloud SDK"
              uses: google-github-actions/setup-gcloud@v3

            - name: "Use gcloud CLI"
              run: gcloud info

            - name: "Configure Docker"
              run: gcloud auth configure-docker $REGISTRY --quiet

            - name: "Get GKE credentials"
              uses: "google-github-actions/get-gke-credentials@v2"
              with:
                  cluster_name: "${{ env.GKE_CLUSTER }}"
                  project_id: "${{ env.PROJECT_ID }}"
                  location: "${{ env.GKE_ZONE }}"

            - name: Set up Docker Buildx
              if: ${{ github.event_name == 'push' && env.SKIP_DEPLOY != 'true' }}
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: ${{ env.ARCHITECTURE }}

            - name: Build and push images
              if: ${{ github.event_name == 'push' && env.SKIP_DEPLOY != 'true' }}
              run: |-
                  docker buildx build --platform ${{ env.ARCHITECTURE }} -t ${{ steps.set_outputs.outputs.ping_pong_image }} --push -f ./ping-pong/ .
                  docker buildx build --platform ${{ env.ARCHITECTURE }} -t ${{ steps.set_outputs.outputs.log_output_image }} --push -f ./log-output/ .
                  docker buildx build --platform ${{ env.ARCHITECTURE }} -t ${{ steps.set_outputs.outputs.greeter_image }} --push -f ./greeter/ .
            - name: Set up Kustomize
              if: ${{ github.event_name == 'push' && env.SKIP_DEPLOY != 'true' }}
              uses: imranismail/setup-kustomize@v2.1.0

            - name: Deploy
              if: ${{ github.event_name == 'push' && env.SKIP_DEPLOY != 'true' }}
              run: |-
                  cd ./kubernetes
                  NAMESPACE=${{ steps.set_outputs.outputs.sanitized_name }}
                  if [[ "$NAMESPACE" == "main" ]]; then
                      NAMESPACE="exercises"
                  fi
                  kubectl create namespace $NAMESPACE || true
                  kubectl config set-context --current --namespace=$NAMESPACE
                  kustomize edit set namespace $NAMESPACE
                  kustomize edit set image ping-pong=${{ steps.set_outputs.outputs.ping_pong_image }}
                  kustomize edit set image log-output=${{ steps.set_outputs.outputs.log_output_image }}
                  kustomize edit set image greeter=${{ steps.set_outputs.outputs.greeter_image }}
                  kustomize build . | kubectl apply -f -
                  kubectl rollout status all -n $NAMESPACE
                  kubectl get services -o wide -n $NAMESPACE

            - name: commit kustomization.yaml to GitHub
              uses: EndBug/add-and-commit@v9
              with:
                  add: "./kubernetes/kustomization.yaml"
                  message: New version released ${{ github.sha }}
